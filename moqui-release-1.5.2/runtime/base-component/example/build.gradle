/*
 * This Work is in the public domain and is provided on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of TITLE,
 * NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
 * You are solely responsible for determining the appropriateness of using
 * this Work and assume any risks associated with your use of this Work.
 *
 * This Work includes contributions authored by David E. Jones, not as a
 * "work for hire", who hereby disclaims any copyright to the same.
 */

apply plugin: 'groovy'

sourceCompatibility = '1.7'
def moquiDir = file(projectDir.absolutePath + '/../../..')
def frameworkDir = file(moquiDir.absolutePath + '/framework')

// maybe in the future: repositories { mavenCentral() }
repositories {
    flatDir name: 'localLib', dirs: frameworkDir.absolutePath + '/lib'
    flatDir name: 'localLibCamel', dirs: frameworkDir.absolutePath + '/lib/camel'
    flatDir name: 'localLibFop', dirs: frameworkDir.absolutePath + '/lib/fop'
    flatDir name: 'localLibSearch', dirs: frameworkDir.absolutePath + '/lib/search'
    flatDir name: 'localLibKie', dirs: frameworkDir.absolutePath + '/lib/kie'
    flatDir name: 'localLibOrientDb', dirs: frameworkDir.absolutePath + '/lib/orientdb'
    flatDir name: 'moquiLib', dirs: frameworkDir.absolutePath + '/build/libs'
}

dependencies {
    compile fileTree(dir: frameworkDir.absolutePath + '/lib', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/camel', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/fop', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/search', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/kie', includes: ['*.jar'])
    compile fileTree(dir: frameworkDir.absolutePath + '/lib/orientdb', includes: ['*.jar'])
    compile name: 'moqui-framework', version: version // Public Domain
}

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
check.dependsOn.remove(test)

jar {
    destinationDir = file(projectDir.absolutePath + '/lib')
    // this is required to change from the default that includes the path to this module (ie 'runtime/base-componet/example')
    baseName = 'example'
}
task cleanLib(type: Delete) { delete file(jar.archivePath) }
clean.dependsOn cleanLib

test {
    systemProperty 'moqui.runtime', moquiDir.absolutePath + '/runtime'
    systemProperty 'moqui.conf', 'conf/MoquiDevTestConf.xml'
    systemProperty 'moqui.init.static', 'true'
    maxHeapSize = "256M"
    jvmArgs '-XX:MaxPermSize=128m'

    testLogging.showStandardStreams = true

    classpath += files(sourceSets.main.output.classesDir)

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
}
