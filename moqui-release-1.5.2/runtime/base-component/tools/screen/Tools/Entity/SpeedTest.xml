<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-1.5.xsd"
        default-menu-title="Speed Test" begin-transaction="true">

    <actions>
        <script><![CDATA[
            import org.moqui.context.Cache
            import org.moqui.context.ExecutionContext
            import org.moqui.entity.EntityFacade
            import org.moqui.entity.EntityValue
            import org.moqui.entity.EntityCondition
            import org.moqui.entity.EntityConditionFactory
            import java.text.DecimalFormat
            import java.sql.Timestamp
            import org.slf4j.Logger
            import org.slf4j.LoggerFactory

            Logger logger = LoggerFactory.getLogger("SpeedTest")

            ExecutionContext ec = context.ec
            EntityFacade ef = ec.entity
            DecimalFormat decimalFormat = new DecimalFormat("#,##0.#######")
            Timestamp nowTs = new Timestamp(System.currentTimeMillis())

            baseCalls = baseCalls ?: '1000'
            baseCallsNum = ec.l10n.parseNumber(baseCalls, '') as int

            beginTime = System.currentTimeMillis()

            def performanceList = []

            // direct cache writes and reads with EC
            calls = baseCallsNum * 10
            Cache testCache = ec.cache.getCache("test.cache")
            EntityValue testEnumValue =
                    ef.find("moqui.basic.Enumeration").condition([enumId:"_NA_"]).useCache(true).one()
            // to measure the cache time and not the condition creation time, create those in advance
            startTime = System.currentTimeMillis()
            EntityConditionFactory ecf = ef.conditionFactory
            List<EntityCondition> conditionList = new ArrayList(calls)
            for (int i = 0; i < calls; i++) {
                conditionList.add(ecf.makeCondition([enumId:"_NA_"+i]))
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"create EntityCondition", entity:"moqui.basic.Enumeration", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            startTime = System.currentTimeMillis()
            for (int i = 0; i < calls; i++) {
                testCache.put(conditionList[i], testEnumValue)
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct cache writes", entity:"moqui.basic.Enumeration", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            startTime = System.currentTimeMillis()
            for (int i = 0; i < calls; i++) {
                testCache.get(conditionList[i])
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct cache reads", entity:"moqui.basic.Enumeration", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // one PK cache
            calls = baseCallsNum
            startTime = System.currentTimeMillis()
            for (int i = 0; i < calls; i++) {
                ef.find("moqui.basic.Enumeration").condition([enumId:"_NA_"]).useCache(true).one()
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"one PK cache", entity:"moqui.basic.Enumeration", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // one PK
            calls = baseCallsNum
            startTime = System.currentTimeMillis()
            for (int i = 0; i < calls; i++) {
                ef.find("moqui.basic.Enumeration").condition([enumId:"_NA_"]).useCache(false).one()
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"one PK", entity:"moqui.basic.Enumeration", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // ========== direct CrUD tests ==========
            calls = baseCallsNum/2

            // create with sequenced ID test
            startTime = System.currentTimeMillis()
            List createTestList = []
            for (int i = 0; i < calls; i++) {
                createTestList.add(ef.makeValue("moqui.tools.test.ToolsTestEntity").setFields([testMedium:"Medium "+i,
                        testLong:"Long "+i, testIndicator:"Y", testDateTime:nowTs, testNumberInteger:i,
                        testNumberDecimal:(i+0.5)], true, null, null).setSequencedIdPrimary().create())
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct create with sequenced ID", entity:"moqui.tools.test.ToolsTestEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // create with preset ID test
            startTime = System.currentTimeMillis()
            for (int i = 0; i < calls; i++) {
                createTestList.add(ef.makeValue("moqui.tools.test.ToolsTestEntity").setFields([testId:("id"+i),
                        testMedium:"Medium "+i, testLong:"Long "+i, testIndicator:"Y", testDateTime:nowTs,
                        testNumberInteger:i, testNumberDecimal:(i+0.5)], true, null, null).create())
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct create with preset ID", entity:"moqui.tools.test.ToolsTestEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // update test
            calls = createTestList.size()
            startTime = System.currentTimeMillis()
            for (def ev in createTestList) {
                ev.testMedium = ev.testMedium + " - Updated"
                ev.update()
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct update", entity:"moqui.tools.test.ToolsTestEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // delete
            calls = createTestList.size()
            startTime = System.currentTimeMillis()
            for (def ev in createTestList) {
                ev.delete()
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct delete", entity:"moqui.tools.test.ToolsTestEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // ========== service CrUD tests ==========
            calls = baseCallsNum/2

            // create with sequenced ID test
            startTime = System.currentTimeMillis()
            List createTestIdList = []
            for (int i = 0; i < calls; i++) {
                createTestIdList.add(ec.service.sync().name("create", "moqui.tools.test.ToolsTestEntity").parameters([
                        testMedium:"Medium "+i, testLong:"Long "+i, testIndicator:"Y", testDateTime:nowTs,
                        testNumberInteger:i, testNumberDecimal:(i+0.5)]).call().testId)
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"service create with sequenced ID", entity:"moqui.tools.test.ToolsTestEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // update test
            calls = createTestIdList.size()
            startTime = System.currentTimeMillis()
            for (String id in createTestIdList) {
                ec.service.sync().name("update", "moqui.tools.test.ToolsTestEntity").parameters([testId:id, testMedium:"Updated Text"]).call()
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"service update", entity:"moqui.tools.test.ToolsTestEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // delete
            calls = createTestIdList.size()
            startTime = System.currentTimeMillis()
            for (String id in createTestIdList) {
                ec.service.sync().name("delete", "moqui.tools.test.ToolsTestEntity").parameter("testId", id).call()
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"service delete", entity:"moqui.tools.test.ToolsTestEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // ========== NoSQL direct CrUD tests ==========
            calls = baseCallsNum/2

            // create with sequenced ID test
            startTime = System.currentTimeMillis()
            List createNoSqlTestList = []
            for (int i = 0; i < calls; i++) {
                EntityValue ev = ef.makeValue("moqui.tools.test.ToolsTestNoSqlEntity").setFields([testMedium:"Medium "+i,
                        testLong:"Long "+i, testIndicator:"Y", testDateTime:nowTs, testNumberInteger:i,
                        testNumberDecimal:(i+0.5)], true, null, null).setSequencedIdPrimary().create()
                createNoSqlTestList.add(ev)
                // logger.warn("===== created ToolsTestNoSqlEntity value ${ev}")
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct create with sequenced ID", entity:"moqui.tools.test.ToolsTestNoSqlEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // create with preset ID test
            startTime = System.currentTimeMillis()
            for (int i = 0; i < calls; i++) {
                createNoSqlTestList.add(ef.makeValue("moqui.tools.test.ToolsTestNoSqlEntity").setFields([testId:("id"+i),
                        testMedium:"Medium "+i, testLong:"Long "+i, testIndicator:"Y", testDateTime:nowTs,
                        testNumberInteger:i, testNumberDecimal:(i+0.5)], true, null, null).create())
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct create with preset ID", entity:"moqui.tools.test.ToolsTestNoSqlEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // update test
            calls = createNoSqlTestList.size()
            startTime = System.currentTimeMillis()
            for (def ev in createNoSqlTestList) {
                ev.testMedium = ev.testMedium + " - Updated"
                ev.update()
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct update", entity:"moqui.tools.test.ToolsTestNoSqlEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])

            // delete
            calls = createNoSqlTestList.size()
            startTime = System.currentTimeMillis()
            for (def ev in createNoSqlTestList) {
                ev.delete()
            }
            seconds = ((System.currentTimeMillis() - startTime) / 1000) ?: 0.001
            performanceList.add([operation:"direct delete", entity:"moqui.tools.test.ToolsTestNoSqlEntity", calls:calls, seconds:seconds,
                    secsPerCall:decimalFormat.format(seconds / calls),
                    callsPerSecond:decimalFormat.format(calls / seconds)])


            context.performanceList = performanceList
            ]]></script>
    </actions>
    <widgets>
        <form-single name="SelectBaseCalls" transition=".">
            <field name="baseCalls"><default-field><text-line size="10"/></default-field></field>
            <field name="submitButton"><default-field title="Run"><submit/></default-field></field>
            <field-layout><field-row-big><field-ref name="baseCalls"/><field-ref name="submitButton"/></field-row-big></field-layout>
        </form-single>
        <form-list name="PerformanceResults" list="performanceList">
            <field name="operation"><default-field><display/></default-field></field>
            <field name="entity"><default-field><display/></default-field></field>
            <field name="calls"><default-field><display/></default-field></field>
            <field name="seconds"><default-field><display/></default-field></field>
            <field name="secsPerCall"><default-field><display/></default-field></field>
            <field name="callsPerSecond"><default-field><display/></default-field></field>
        </form-list>
        <label text="Total Time ${ec.l10n.format((System.currentTimeMillis() - beginTime)/1000, '0.00')}s" type="strong"/>
    </widgets>
</screen>
